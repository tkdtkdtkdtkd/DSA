//method 1

//method 2
vector<vector<int>> threeSum(vector<int>& nums) {
    set<vector<int>>st;
    int n=nums.size();
    for(int i=0;i<n;i++){
        set<int>hashSet;
        for(int j=i+1;j<n;j++){
            int third=-(nums[i]+nums[j]);
            if(hashSet.find(third)!=hashSet.end()){
                vector<int>temp={nums[i],nums[j],third};
                sort(temp.begin(),temp.end());
                st.insert(temp);
            }
            hashSet.insert(nums[j]);
        }
    }
    vector<vector<int>> ans(st.begin(),st.end());
    return ans;
}

//method 3
vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>>ans;
    sort(nums.begin(),nums.end());
    int n=nums.size(),target=0;
    for(int i=0;i<n-2;i++){
        if(i>0&&nums[i]==nums[i-1]) continue;
        int j=i+1,k=n-1;
        while(j<k){
            int sum=nums[i]+nums[j]+nums[k];
            if(sum==target){
                ans.push_back({nums[i],nums[j],nums[k]}); j++; k--;
                while(j<k && nums[j]==nums[j-1]) j++;
                while(j<k && nums[k]==nums[k+1]) k--;
            }
            else if(sum<target) j++;
            else k--;
        }
    }
    return ans;
}
