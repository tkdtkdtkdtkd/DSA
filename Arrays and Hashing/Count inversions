//method 1
int numberOfInversions(vector<int>&a, int n) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (a[i] > a[j]) cnt++;
        }
    }
    return cnt;
}

//method 2
int merge(vector<int>&arr,int low,int mid,int high){
    vector<int>temp;
    int left=low,right=mid+1,ct=0;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]) temp.push_back(arr[left++]);
        else{ temp.push_back(arr[right++]); ct+=mid-left+1;}
    }
    while(left<=mid) temp.push_back(arr[left++]);
    while(right<=high) temp.push_back(arr[right++]);
    for(int i=low;i<=high;i++) arr[i]=temp[i-low];
    return ct;
}

int mergeSort(vector<int>&arr,int low,int high){
    int ct=0;
    if(low>=high) return ct;
    int mid=(low+high)/2;
    ct+=mergeSort(arr,low,mid);
    ct+=mergeSort(arr,mid+1,high);
    ct+=merge(arr,low,mid,high);
    return ct;
}

int inversionCount(vector<int> &arr) {
    // Your Code Here
    return mergeSort(arr,0,arr.size()-1);
}
