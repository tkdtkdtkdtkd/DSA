//method 1
vector<int> findTwoElement(vector<int>& arr) {
    map<int,int>mpp;
    int n=arr.size();
    int repeating=-1,missing=-1;
    for(int i=0;i<n;i++){
        mpp[arr[i]]++;
    }
    for(int i=1;i<=n;i++){
        if(mpp[i]==2) repeating=i;
        else if(mpp[i]==0) missing=i;
    }
    return {repeating,missing};
}

//method 2
vector<int> findTwoElement(vector<int>& arr) {
    long long n=arr.size();
    long long sum=0,sum2=0;
    for(auto x:arr){
        sum+=x; sum2+=(long long)x*(long long)x;
    }
    long long var1=sum-n*(n+1)/2,var2=sum2-n*(n+1)*(2*n+1)/6;
    long long var3=var2/var1;
    long long x=(var3+var1)/2;
    long long y=var3-x;
    return {(int)x,(int)y};
}

//method 3
vector<int> findTwoElement(vector<int>& arr) {
    // code here
    int n=arr.size(),xr=0,bitno=0;
    for(int i=1;i<=n;i++){
        xr^=arr[i-1]^i;
    }
    while((xr&(1<<bitno))==0) bitno++;
    int one=0,zero=0;
    for(int i=0;i<n;i++){
        if(arr[i]&(1<<bitno)) one=one^arr[i];
        else zero=zero^arr[i];
        if((i+1)&(1<<bitno)) one^=(i+1);
        else zero^=(i+1);
    }
    for(auto x:arr){
        if(x==one) return {one,zero};
    }
    return {zero,one};
}
